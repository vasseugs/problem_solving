package think_like_a_programmer.b;

 /*
  3. Алгоритм валидации номера Луна.

  Есть понятие валидного числа.

  Валидное число формируется следующим образом. Берется некое исходное число, и считается сумма его
  цифр. При этом каждая вторая цифра, начиная с последней включительно, умножается на 2. Если результат
  умножения цифры на 2 больше 9, то цифры из результат этого произведения
  прибавляются к общей сумме по отдельности. После суммирования в конце добавляется одно число
  такое, чтобы предыдущая сумма плюс это число делилось бы на 10.

  Необходимо проверить, валидно ли число, данное на вход, в соответствии с описанным правилом.

  Число может быть любой длины.
  Число считывается по одной цифре за раз и не хранится в виде структуры данных в памяти.
   */

public class LuhnNumberValidator {

  // так как символы приходят по одному, храним сумму в 2 переменных
  // в одной - сумма с умножением нечетных позиций, в друге - с умножением четных

  // используем счётчик символов
  // используем переменную для текущего символа

  // умножаем каждый символ на 2. для нечетных кладем сумму в одну переменную, для четных - в другую

  // проверяем, не является ли символ последним
  // для этого на каждом символе сверяем его с признаком конца строки
  // если он не последний, то умножаем на 2 и присоединяем к сумме чётных или нечётных позиций
  // если последний, то приплюсовываем к нужной переменной
  // выбираем переменную в зависимости от того, вышел ли счётчик символов четным или нечетным

  // с учетом последнего проверочного числа смотрим, делится ли результат на 10, и выводим сообщение

  /*
  Считываем всё введенное число за раз как строку

  Начинаем читать по одному символу, преобразуя символ в тип int

  По мере чтения символов аккумулируем сумму нечетных и четных позиций в 2 переменных.
  умножаем каждый символ на 2. для нечетных кладем сумму в одну переменную, для четных - в другую

  Проверяем, не является ли текущий символ последним

   */

  public boolean isValid(String numberAsString) {
    var numberLength = numberAsString.length();
    int sum = 0;

    for (int index = 0; index < numberLength; index++) {
      int digit = numberAsString.charAt(index) - 48;

      // если количество цифр четное, то умножаем каждое нечетное
      // нечетная позиция соответствует четному индексу
      if (numberLength % 2 == 0) {
        if (index % 2 == 0) {
          digit = multiplyDigit(digit);
        }
        sum += digit;
      } else {
        if (index % 2 != 0) {
          digit = multiplyDigit(digit);
        }
        sum += digit;
      }
    }

    if (sum % 10 == 0) {
      System.out.println("Число валидно");
      return true;
    } else {
      System.out.println("Число не валидно. Проверочная сумма равна " + sum);
      return false;
    }
  }

  /**
   * Выполняет умножение с учетом переполнения 10
   */
  private static int multiplyDigit(int digit) {
    int result = 0;
    var multiplication = digit * 2;

    if (multiplication > 10) {
      result = 1 + multiplication % 10;
    } else {
      result = multiplication;
    }

    return result;
  }
}
